import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.911d3385.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"template/template-vue3-ts-initial.md"}'),e={name:"template/template-vue3-ts-initial.md"},o=l(`<h2 id="vue3-ts-initial" tabindex="-1">vue3-ts-initial <a class="header-anchor" href="#vue3-ts-initial" aria-label="Permalink to &quot;vue3-ts-initial&quot;">​</a></h2><h3 id="啥是vue3-ts-initial" tabindex="-1">啥是vue3-ts-initial ? <a class="header-anchor" href="#啥是vue3-ts-initial" aria-label="Permalink to &quot;啥是vue3-ts-initial ?&quot;">​</a></h3><p>此模板创建目的本是练习使用尤哥推荐的Vite 后续逐渐想搞一套方便使用的脚手架。所有内部引入细节在 <a href="https://github.com/wushijiang13/vue3-vite-cli" target="_blank" rel="noreferrer">github</a> 均有分支细节依次引入教程 以及一些踩坑记录和解决方案。</p><p>以Vite + Vue3 + Ts 搭建的框架，模板原型是Vite 中的 <code>Vue3 + Ts</code> 模板，内部加入多种UI库的按需引入分层， 并将Vue对象全局化。支持多模块打包，<code>coress-env</code> 指令式环境变量注入 , 支持多语言引入。一键下载内部标有详细说明文件进行分层解释。</p><p>想要尝试 Vite 和 Vue3 以及 Ts 小伙伴，此乃入门项目最简易最容易上手的学习并使用的项目模板！</p><h3 id="项目引入细节分支" tabindex="-1">项目引入细节分支 <a class="header-anchor" href="#项目引入细节分支" aria-label="Permalink to &quot;项目引入细节分支&quot;">​</a></h3><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.1-vue-router" target="_blank" rel="noreferrer">vue-router</a> :<code>引入 vue-router，并简单使用</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.2-vuex" target="_blank" rel="noreferrer">vuex</a> :<code>引入 vuex,测试更新</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.3-element-plus" target="_blank" rel="noreferrer">element-plus</a> :<code>按需引入 element-plus，并且分层 main.js 只需引入js 即可, 解决ts静态检查bug</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.4-ant-design-vue" target="_blank" rel="noreferrer">ant-design-vue</a> :<code>按需引入 ant-design-vue</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.5-vant" target="_blank" rel="noreferrer">vant</a> :<code>按需引入 vant</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.6-axios" target="_blank" rel="noreferrer">axios</a> :<code>axios 引入分层，并加入api list 管理所有请求接口</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.7-vue-i18n" target="_blank" rel="noreferrer">vue-i18n</a> :<code>引入vue-i18n 多语言，支持切换中英</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.8-pack-more" target="_blank" rel="noreferrer">pack-more</a> :<code>项目层级修改成多模块，可模块启动也可全局加载。支持多模块打包,使用 vite 官方推荐 env 文件注入环境变量方式</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.9-cross-env" target="_blank" rel="noreferrer">cross-env</a> :<code>由于考虑到后续模块过多更换成cross-env 注入环境变量，移除env 文件</code></p><p><a href="https://github.com/wushijiang13/vue3-vite-cli/tree/0.0.10-beta" target="_blank" rel="noreferrer">finally</a> :<code>将项目层级修改为模板层级，整体模板上传至npm，并且支持指令式下载，借鉴 vite 项目架构</code></p><h3 id="项目层级" tabindex="-1">项目层级 <a class="header-anchor" href="#项目层级" aria-label="Permalink to &quot;项目层级&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">提示</p><p>此层级为 vue3-ts-initial 模板层级</p></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> public </span><span style="color:#676E95;font-style:italic;">//静态资源</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> src </span><span style="color:#676E95;font-style:italic;">//项目目录</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— assets </span><span style="color:#676E95;font-style:italic;">//第三方资源</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— config </span><span style="color:#676E95;font-style:italic;">//配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">—   </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— i18n </span><span style="color:#676E95;font-style:italic;">//多语言</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">—   </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— lazy_ui </span><span style="color:#676E95;font-style:italic;">//所有ui库的集合，导入一个ts 直接引入到main</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">—   </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— request_lib </span><span style="color:#676E95;font-style:italic;">//所有网络库以及api list都应放到里面最后直接引入api list 返回的变量调用接口即可</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">—   </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— vue </span><span style="color:#676E95;font-style:italic;">//由于vue3可创建多个vue父对象，并没有实现全局vue 方便vue2 开发习惯，将vue对象共享</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— </span><span style="color:#89DDFF;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//多模块文件，内部包含一个个模块，分为 路由 + 组件 单独拆分开是为了 多环境需要的话，直接单独打包模块 H5兼容，在最外层的router config里直接导入多模块路由即可拼成整个项目 </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— page </span><span style="color:#676E95;font-style:italic;">//共享父组件，或者通用组件页面等，都可放入。运行后会在整个项目中体现。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— router </span><span style="color:#676E95;font-style:italic;">//路由配置 可通过环境变量区分打包路由包含哪些模块</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">— store </span><span style="color:#676E95;font-style:italic;">//vuex 通用状态管理</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> App</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue </span><span style="color:#676E95;font-style:italic;">//公用最外层父组件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> global</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">//ts 拓展this 声明文件。如不需要忽略即可</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">//入口文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> shims</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">//vue文件，第三方文件声明文件。</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="ui库配置" tabindex="-1">UI库配置 <a class="header-anchor" href="#ui库配置" aria-label="Permalink to &quot;UI库配置&quot;">​</a></h3><p>lazy_ui 文件夹中 ui_import 为 <code>所有组件库的按需导入</code><br> lazy_ui.ts 为 <code>统一引入</code></p><h4 id="新增ui库-以ant-design-vue-为例" tabindex="-1">新增UI库 以ant-design-vue 为例 <a class="header-anchor" href="#新增ui库-以ant-design-vue-为例" aria-label="Permalink to &quot;新增UI库 以ant-design-vue 为例&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> ui_import </span><span style="color:#676E95;font-style:italic;">//加入 ant ui库</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> ant_lazy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">//ant-design-vue 库</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>内部引入按照UI库官方文档按需引入即可！</p></div><h4 id="在-vite-config-中按需加载样式" tabindex="-1">在 vite.config 中按需加载样式 <a class="header-anchor" href="#在-vite-config-中按需加载样式" aria-label="Permalink to &quot;在 vite.config 中按需加载样式&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//vite.config.ts </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">libraryName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ant-design-vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">resolveStyle</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">ant-design-vue/es/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/style/index.css</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">resolveComponent</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">ant-design-vue/es/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/index.js</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="网络请求配置" tabindex="-1">网络请求配置 <a class="header-anchor" href="#网络请求配置" aria-label="Permalink to &quot;网络请求配置&quot;">​</a></h3><p>request_lib 文件夹中 api -&gt; api_list 为 <code>所有接口整合</code><br> api_config.ts 为 <code>api的请求地址,根据环境变量判断</code><br> axios_request.ts 为 <code>axios 的简单封装，后续根据自己需求，自行封装</code></p><h4 id="新增接口-api-以-getallarticlelist-获取文章list-为例" tabindex="-1">新增接口 api 以 getAllArticleList 获取文章list 为例 <a class="header-anchor" href="#新增接口-api-以-getallarticlelist-获取文章list-为例" aria-label="Permalink to &quot;新增接口 api  以 getAllArticleList 获取文章list 为例&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> request_lib </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> api </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> api_list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">//在此加入</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>根据 axios 封装默认返回一个promise的接口请求结果，如果不了解promise，请先学习ES6！</p></div><h4 id="在api-list-ts-使用-post" tabindex="-1">在api_list.ts 使用 post <a class="header-anchor" href="#在api-list-ts-使用-post" aria-label="Permalink to &quot;在api_list.ts 使用 post&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//api_list.ts </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getAllArticleList</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">=(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vueAxios</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/article/getArticleList</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">getAllArticleList</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如需get请求 将 <code>vueAxios.post</code> 更换成.get即可</p></div><hr><h3 id="多语言配置" tabindex="-1">多语言配置 <a class="header-anchor" href="#多语言配置" aria-label="Permalink to &quot;多语言配置&quot;">​</a></h3><p>i18n 文件夹中 config 为 <code>i18n_enum.ts</code> 为支持的语言类型枚举<br> language_pack 文件夹中为 <code>所有语言包以及合并导出一个多语言包</code></p><h4 id="新增语言" tabindex="-1">新增语言 <a class="header-anchor" href="#新增语言" aria-label="Permalink to &quot;新增语言&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> language_pack</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> xxx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">//语言包</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> i18n_message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#676E95;font-style:italic;">//导出整合包</span></span>
<span class="line"></span></code></pre></div><h4 id="以en为例使用-en-ts" tabindex="-1">以en为例使用 en.ts <a class="header-anchor" href="#以en为例使用-en-ts" aria-label="Permalink to &quot;以en为例使用 en.ts&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//en.ts </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> en</span><span style="color:#89DDFF;">:{}={</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">jumps</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jump</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">defaultBtn</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Default button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">elementTitle</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Element-Plus use</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">en</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//i18n_message.ts</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">en</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./en</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> messages</span><span style="color:#89DDFF;">:{}={</span></span>
<span class="line"><span style="color:#A6ACCD;">     en</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//i18n_enum.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LanginTerval</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    EN</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="环境变量使用" tabindex="-1">环境变量使用 <a class="header-anchor" href="#环境变量使用" aria-label="Permalink to &quot;环境变量使用&quot;">​</a></h3><p>由于使用corss-env 注入，所以不需要 import.xxx的vite 官方注入方式。因为此方法不支持在vite.config中直接获取使用，需项目启动后在组件中才能获取，失去了便捷性。</p><h4 id="注入" tabindex="-1">注入 <a class="header-anchor" href="#注入" aria-label="Permalink to &quot;注入&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> cross</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">env VITE_ROOT_URL</span><span style="color:#89DDFF;">=./</span><span style="color:#A6ACCD;">src</span><span style="color:#89DDFF;">/module/</span><span style="color:#A6ACCD;">module1  vite</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">//corss-env 环境变量名 = 值 vite启动项</span></span>
<span class="line"></span></code></pre></div><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VITE_ROOT_URL</span></span>
<span class="line"></span></code></pre></div><h2 id="进阶使用" tabindex="-1">进阶使用 <a class="header-anchor" href="#进阶使用" aria-label="Permalink to &quot;进阶使用&quot;">​</a></h2><h3 id="多模块化构建配置" tabindex="-1">多模块化构建配置 <a class="header-anchor" href="#多模块化构建配置" aria-label="Permalink to &quot;多模块化构建配置&quot;">​</a></h3><p>一般业务相对不复杂的项目用不到此项。此项配置适用于某些模块资源和现有项目有复用向并且疲于重新搭建项目引入开发，或需要将模块抽离单独打包时做出的修改</p><div class="tip custom-block"><p class="custom-block-title">如不需要模块化</p><p>如果不需要模块化构建，可删除module文件夹，并且在router 文件夹中删除对应的 模块引入即可！</p></div><h4 id="创建" tabindex="-1">创建 <a class="header-anchor" href="#创建" aria-label="Permalink to &quot;创建&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//在model 文件夹内部创建 一个模块文件夹 以model1为例</span></span>
<span class="line"><span style="color:#A6ACCD;">  module1</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> page  </span><span style="color:#676E95;font-style:italic;">//组件页面</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> router </span><span style="color:#676E95;font-style:italic;">//路由配置</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">html </span><span style="color:#676E95;font-style:italic;">//打包需要，内部可自定义</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|-</span><span style="color:#A6ACCD;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts  </span><span style="color:#676E95;font-style:italic;">//模块入口文件</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//内部创建index.html 的原因是为了打包时 直接同级查找打包，并且模块可以单独对 模块index.html 进行配置</span></span>
<span class="line"></span></code></pre></div><h4 id="使用-1" tabindex="-1">使用 <a class="header-anchor" href="#使用-1" aria-label="Permalink to &quot;使用&quot;">​</a></h4><p>一般区分模块启动还是整个项目启动，依赖于环境变量的配置而加载不同的入口文件从而达到 <code>解耦管理</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//此项目我已 VITE_ROOT_URL 为注入项来区分启动哪个入口文件。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dev:module1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cross-env VITE_ROOT_URL=./src/module/module1 VITE_MODULE_NAME=module1 vite</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//指令名 :  模块入口文件地址  模块名 vite 启动</span></span>
<span class="line"></span></code></pre></div><h2 id="package指令" tabindex="-1">package指令 <a class="header-anchor" href="#package指令" aria-label="Permalink to &quot;package指令&quot;">​</a></h2><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//启动整个项目</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dev-prod</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite --mode production</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//启动整个项目的正式环境</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dev:module1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cross-env VITE_ROOT_URL=./src/module/module1 VITE_MODULE_NAME=module1 vite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//启动model1模块</span></span>
<span class="line"></span></code></pre></div><h3 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-tsc --noEmit --skipLibCheck &amp;&amp; vite build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//ts 检查 忽略 node_modules 检查，并且 build 整个项目</span></span>
<span class="line"></span></code></pre></div>`,64),p=[o];function t(c,r,i,D,y,F){return n(),a("div",null,p)}const u=s(e,[["render",t]]);export{A as __pageData,u as default};
